.ios, .md {
 
    home-page {
 
      .scroll-content {
        height: 100%
      }
 
      #map {
        width: 100%;
        height: 100%;
      }
      
      ion-fab[bottom] {
          bottom: 40px;
      }
      ion-fab[right] {
          right: 50px;
      }
    }
    home-page #infoWindow{
      background-color:white;
      height:250px;
      width:300px;
      position:relative;
    }
    // #infoWindow{
    //   background-color:#333333;
    // }
    home-page .infoWindowTitle{
      width:100%;
      background-color:#333333;
    }
    #infoWindowBody{
      text-align:center;
      padding-top:20%;
    }
    // element.style {
      
    // }
  .gm-style #infoWindow{
    font-size: 30px;
  }
  
}
///////// LOADING PAGE /////////////
$size : 120px;
$color1 : #3A60DB;
$color2 : #FFFFFF;
@mixin keyframes($name) {
  @-o-keyframes #{$name} { @content };
  @-moz-keyframes #{$name} { @content };
  @-webkit-keyframes #{$name} { @content }; 
  @keyframes #{$name} { @content };
}
@mixin animation($prop...) {
  -o-animation: $prop;
  -moz-animation: $prop;
  -ms-animation: $prop;
  -webkit-animation: $prop;
  animation: $prop;
}
@mixin transform($prop...) {
  -o-transform: $prop;
  -moz-transform: $prop;
  -webkit-transform: $prop;
  -ms-transform: $prop;
  transform: $prop;
}
@mixin transform-origin($prop...) {
  -o-transform-origin: $prop;
  -moz-transform-origin: $prop;
  -webkit-transform-origin: $prop;
  -ms-transform-origin: $prop;
  transform-origin: $prop;
}
.load{
   width: 100%;
   height: 100vh;
   position: fixed;
   top: 0;
   left: 0;
   &:before,
   &:after,
   .dot,
   .outline{
      position: absolute;
      top: 50%;
      left: 50%;
      @include transform(translate(-50%,-50%));
      border-radius:50%;
   }
   .dot{
      width: #{$size - $size / 100 * 20};
      height: #{$size - $size / 100 * 20};
      background: $color2;
      @include animation(in 4s linear infinite);
      z-index:2;
   }
   &:before{
      content: "";
      width: 0px;
      height: 0px;
      background: $color1;
      @include animation(out1 4s linear infinite);
   }
   &:after{
      content: "";
      width: 0px;
      height: 0px;
      background: $color2;
      @include animation(out2 4s linear infinite);
   }
   .outline{
      width: $size;
      height: $size;
      z-index:2;
      span{
         width: $size / 2 + 8;
         height: $size / 2 + 8;
         @include transform-origin(100% 100%);
         @include transform(rotate(45deg) skewX(80deg));
         overflow: hidden;
         position: absolute;
         bottom: 50%; 
         right: 50%;
         @include animation(outline 4s linear infinite);
         &:before{
            content: "";
            display: block;
            border: solid 5px #fff;
            width: 200%;
            height: 200%;
            border-radius: 50%;
            @include transform(skewX(-80deg));
            @include animation(outlineBefore 4s linear infinite);
         }
      }
   }
}
@include keyframes(outline){
   0%{
      @include transform(rotate(0deg) skewX(80deg));
   }
   25%{
      @include transform(rotate(500deg) skewX(15deg));
   }
   50%{
      @include transform(rotate(1000deg) skewX(40deg));
   }
   75%{
      @include transform(rotate(1500deg) skewX(60deg));
   }
   100%{
      @include transform(rotate(2160deg) skewX(80deg));
   }
}
@include keyframes(outlineBefore){
   0%{
      @include transform(skewX(-80deg));
      border: solid 5px #ffffff;
   }
   25%{
      @include transform(skewX(-15deg));
      border: solid 5px #ffffff;
   }
   49%{
      border: solid 5px #ffffff;
   }
   50%{
      @include transform(skewX(-40deg));
      border: solid 5px #3463EB;
   }
   75%{
      @include transform(skewX(-60deg));
      border: solid 5px #3463EB;
   }
   100%{
      @include transform(skewX(-80deg));
      border: solid 5px #3463EB;
   }
}
@include keyframes(in){
   0%{
      width: #{$size + $size / 100 * 20};
      height: #{$size + $size / 100 * 20};
      background:$color2;
   }
   40%{
      width: 0px;
      height: 0px;
      background:$color2;
   }
   41%{
      width: 0px;
      height: 0px;
      background:$color1;
   }
   50%{
      width: #{$size + $size / 100 * 20};
      height: #{$size + $size / 100 * 20};
      background:$color1;
   }
   90%{
      width: 0px;
      height: 0px;
      background:$color1;
   }
   91%{
      width: 0px;
      height: 0px;
      background:$color2;
   }
   100%{
      width: #{$size + $size / 100 * 20};
      height: #{$size + $size / 100 * 20};
      background:$color2;
   }
}
@include keyframes(out1){
   0%{
      width:0px;
      height:0px;
   }
   30%{
      width:120vw;
      height:120vw;
   }
   100%{
      width:120vw;
      height:120vw;
   }
}
@include keyframes(out2){
   0%{
      width:0px;
      height:0px;
   }
   30%{
      width:0px;
      height:0px;
   }
   60%{
      width:120vw;
      height:120vw;
   }
   100%{
      width:120vw;
      height:120vw;
   }
}
*,
*:after,
*::before {
    -webkit-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    margin:0;
    padding:0;
}
///////// END LOADING PAGE //////////////
//////// CENTER BEACON ////////////
// @import "compass/css3";
// /*
//  * Look, there you are! This is a simple map
//  * marker that you could use to indicate the
//  * user's current location on a map. The style
//  * is that of the new geolocation map marker in
//  * iOS7 and OSX Mavericks.
//  *
//  * Support: browser's that support CSS transitions,
//  *          transforms, animations, and support all
//             of those things on psuedo elements.
//  */
// $diameter: 2em;
// $background: #157efb;
// $border-width: $diameter * 0.125;
// $border-color: white;
// $pulse: true;
// .marker {
//   display: block;
//   position: relative;
//   width: $diameter;
//   height: $diameter;
//   background: $background;
//   border-radius: 50%;
//   animation: pulse 1s ease-in-out infinite alternate;
//   box-shadow: 0 0 0 $border-width white,
//               0 0 3px rgba(0, 0, 0, 0.4);
  
//   &::after {
//     content: '';
//     position: absolute;
//     top: 50%;
//     left: 50%;
//     width: $diameter * 2;
//     height: $diameter * 2;
//     margin-left: -$diameter;
//     margin-top: -$diameter;
//     box-shadow: 0 0 0 1px $border-color;
//     border-radius: 50%;
//     animation: sonar 2s linear infinite;
//   }
// }
// @keyframes pulse {
//   0%   { transform: scale3d(0.8, 0.8, 0.8); }
//   100% { transform: scale3d(1, 1, 1); }
// }
// @keyframes sonar {
//   0% {
//     transform: scale3d(0.5, 0.5, 0.5);
//     opacity: 1;
//   }
//   50%, 100% {
//     transform: scale3d(1, 1, 1);
//     opacity: 0;
//   }
// }
// // Presentation only
// * {
//   box-sizing: border-box;
// }
// body, html {
//   height: 100%;
// }
// body {
//   background-image: url(http://f.cl.ly/items/2q3N361g3X0i2j0t2y3N/Screen-Shot-2013-11-01-at-12.13.48-PM.jpg);
//   background-size: cover;
//   display: flex;
//   flex: row nowrap;
//   justify-content: center;
//   align-items: center;
// }
// .marker {
//   display: flex-item;
// }
/////// END CENTER BEACON //////////
body{
  background:#131313;
  color:#E3E3E3;
  font-family:sans-serif;
}
.loading {
  width: 100%;
  max-width: 700px;
  margin: 0 auto;
  padding: 0;
  position: relative; }
.loading svg {
  width: 100%;
  height: 75%;
}
.loading #pulsar{
  stroke-dasharray:281;
  -webkit-animation: dash 2.5s infinite linear forwards;
}
/*Animation*/
@-webkit-keyframes dash{ from{stroke-dashoffset:814;} to {stroke-dashoffset:-814;}}